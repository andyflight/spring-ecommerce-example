# 🛍️ E-Commerce Application

A fully functional e-commerce application built with **Java Spring Boot**. This project demonstrates core principles of backend development, clean architecture, and modern API design.

---

## ✨ Features
- 📦 **Product Management**: Create, read, update, and delete products.
- 🛍️ **Order Management**: Create and track orders.
- 🔧 **Clean Architecture**: Domain-driven design with separate layers for domain, application, and presentation.
- 🖄 **Swagger API Documentation**: Interactive API documentation available at `/swagger-ui.html`.
- 📡 **REST API**: Fully functional REST API with standard HTTP methods.
- ⚠️ **Global Exception Handling**: Centralized error handling for cleaner controllers.

---

## 📉 Prerequisites
Before you can run this project, make sure you have the following installed:
- **JDK 17+** — Required to compile and run the application.
- **Gradle 7+** — To build the project and manage dependencies.
- **Git** — To clone the repository.

You can check your installed versions with:
```bash
java -version
gradle -v
git --version
```

---

## 🔧 Installation
Follow these steps to set up and run the application on your local machine:

1⃣ **Clone the repository:**
```bash
git clone https://github.com/yourusername/ecommerce-app.git
cd ecommerce-app
```

2⃣ **Build and run the application:**
```bash
./gradlew bootRun
```

3⃣ **Access the application in your browser:**
```
http://localhost:8080
```

---

## 📚 API Documentation
The project provides interactive API documentation via Swagger.
- **Swagger UI**: [http://localhost:8080/swagger-ui.html](http://localhost:8080/swagger-ui.html)
- **OpenAPI (JSON) Docs**: [http://localhost:8080/api-docs](http://localhost:8080/api-docs)

You can explore available endpoints, send test requests, and visualize responses.

---

## 🔧 Usage
Once the application is running, you can perform the following actions via the API:

- **Products**:
  - Create a product: `POST /api/products`
  - Get all products: `GET /api/products`
  - Update a product: `PUT /api/products/{id}`
  - Delete a product: `DELETE /api/products/{id}`

- **Orders**:
  - Create an order: `POST /api/orders`
  - Get order details: `GET /api/orders/{id}`
  - Update an order: `PUT /api/orders/{id}`
  - Delete an order: `DELETE /api/orders/{id}`

Use **Swagger UI** to test these requests directly in your browser.

---

## 📁 Project Structure
```
├── src
│   ├── main
│   │   ├── java
│   │   │   └── com.example.project
│   │   │       ├── controller    // REST controllers for handling HTTP requests
│   │   │       ├── service       // Business logic for domain entities
│   │   │       ├── repository    // Interfaces for data persistence
│   │   │       └── exception     // Custom exceptions and global handlers
│   │   └── resources
│   │       └── application.yml   // Configuration files
├── build.gradle
└── README.md
```

---

## 💡 Technologies
- **Java 17** — Core programming language
- **Spring Boot** — Backend framework
- **Gradle** — Build tool
- **Swagger / OpenAPI** — API documentation

---

## 💏 Contributing
Contributions are welcome! If you have suggestions for improvements or bug fixes, please create a pull request.

1. **Fork the repository**
2. **Create a new branch** (`git checkout -b feature/AmazingFeature`)
3. **Commit your changes** (`git commit -m 'Add some AmazingFeature'`)
4. **Push to the branch** (`git push origin feature/AmazingFeature`)
5. **Open a pull request**

---

## 📄 License
This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## 📊 Info
This project was developed as part of the **Java Spring Course** at **KPI FICE 2024**. It demonstrates essential concepts of Spring Boot development, clean architecture, and API design.

